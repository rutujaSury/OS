Q.1 Write an MPI program to find the min number from randomly generated 1000 numbers 
(stored in array) on a cluster (Hint: Use MPI_Reduce)
-------------------------------------------------------------------------------------------------------------

#include<stdio.h>
#include<mpi.h>
#include<stdlib.h>
int main(int args,char** argv){
	int array[1000] ,global_min=0,local=0,rank,size,chunk;
	for(int i=0;i<1000;i++){
		array[i]=rand()%1000;
	}
	int local_min=0;
	MPI_Init(&args,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	
	chunk=1000/size;
	int newArr[chunk];
	MPI_Scatter(array,chunk,MPI_INT,newArr,chunk,MPI_INT,0,MPI_COMM_WORLD);
	global_min=newArr[0];
	
	for(int i=0;i<chunk;i++){
		
		if(newArr[i]<local_min){
			local_min=newArr[i];
		}
	}
	MPI_Reduce(&local_min,&global_min,1,MPI_INT,MPI_MIN,0,MPI_COMM_WORLD);
	
	if(rank==0){
		printf("the min:%d\n",global_min);
		
	}
	MPI_Finalize();
	return 0;
}

===============================================================================================================

Q.2 Write a simulation program for disk scheduling using FCFS algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. Display 
the list of request in the order in which it is served. Also display the total number of head 
moments.
 65, 95, 30, 91, 18, 116, 142, 44, 168
 Start Head Position: 52
---------------------------------------------------------------------------------------------------------------

#include<stdio.h>
#include<math.h>>
int front,rear;
void init()
{
	front=rear=-1;
}
void display(int *Q)
{
	int i;
	for(i=front;i<=rear;i++)
		printf("\t%d",Q[i]);
}
void enqueu(int *Q,int n,int var)
{
	if(rear==n)
		printf("\nQueue is Full");
	else
	{
		if(front==-1)
			front++;
		rear++;
		Q[rear]=var;
	}
}
int FCFS(int *Q, int n)
{
    int j,seek=0,diff;
    for(j=0;j<n;j++)
    {
        diff=abs(Q[j+1]-Q[j]);
        seek+=diff;
    printf("Disk head moves from %d to %d with seek %d\n",Q[j],Q[j+1],diff);
    }
    return seek;
}
int main()
{
    int queue[20],n,var,head,i,j,k,seek,max;
    float avg;
    init();
    printf("\nFront=%d\nRear=%d",front,rear);
    printf("\nEnter the max range of disk\n");
    scanf("%d",&max);
    printf("Enter the size of queue request\n");
    scanf("%d",&n);
    printf("Enter the initial head position\n");
    scanf("%d",&head);
    printf("Enter the queue of disk positions to be read\n");
    enqueu(queue,n,head);
    for(i=1;i<=n;i++)
    {
        scanf("%d",&var);
        if(var<0||var>max)
            printf("\nError..!Given Position is invalid\n");
        else
        {
            enqueu(queue,n,var);
        }
    }
    printf("\nGiven Queue is\n");
    display(queue);
    printf("\n\nFCFS Algorithm\n");
    seek=FCFS(queue,n);
    printf("Total seek time is %d\n",seek);
    avg=seek/(float)n;
    printf("Average seek time is %f\n",avg);
    return 0;
}