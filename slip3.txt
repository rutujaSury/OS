Q.1 Write a C program to simulate Bankerâ€™s algorithm for the purpose of deadlock
avoidance. Consider the following snapshot of system, A, B, C and D is the 
resource type.
a)Calculate and display the content of need matrix?
b)Is the system in safe state? If display the safe sequence.
--------------------------------------------------------------------------------

#include<stdio.h>
#include<stdlib.h>
int np,nr,i,j,ch;
int max[10][10],allocation[10][10],need[10][10],available[10];
void acceptmatrix(int arr[10][10])
{
	
	printf("enter the elements: ");
	int i,j;
	for(i=0;i<np;i++)
	{
		for(j=0;j<nr;j++)
		{
			scanf("%d",&arr[i][j]);
		}
	}
}
void acceptvector(int arr[])
{
	int i;
	for(i=0;i<nr;i++)
	{
		scanf("%d",&arr[i]);
	}
		
}
void findneed()
{
	int i,j;
	for(i=0;i<np;i++)
	{
		for(j=-0;j<nr;j++)
		{
			need[i][j]=max[i][j]-allocation[i][j];
		}
	}
	printf("\nNeed Calculated!");
}
void displaymatrix()
{
	int i,j;
	printf("\nAllocation\t\tMax\t\tNeed\n");
	for(i=0;i<np;i++)
	{
		for(j=0;j<nr;j++)
		{
			printf("%d",allocation[i][j]);
			//printf("\t");
		}
		for(j=0;j<nr;j++)
		{
			printf("%d",max[i][j]);
			//printf("\t");
		}
		for(j=0;j<nr;j++)
		{
			printf("%d",need[i][j]);
			//printf("\t");
		}
		printf("\n");
		
	}
	printf("Available\n");
	for(j=0;j<nr;j++)
		{
			printf("%d",available[j]);
			printf("\t");
		}
	
}

int main()
{
	
	printf("\nEnter the number of process");
	scanf("%d",&np);
	printf("\nEnter the number of resources:");
	scanf("%d",&nr);
	do{
		printf("\n1.Accept Allocation\n2.Accept Max\n3.calculate need\n4.Accept Available\n5.DISPLAY MATRIX\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				printf("Give Allocation:\n");
				acceptmatrix(allocation);
				break;
			case 2:
				acceptmatrix(max);
				break;
				
			case 3:
				findneed();
				break;
			case 4:
				acceptvector(available);
				break;
			case 5:
				displaymatrix(allocation);
				break;
			case 6:
				printf("\nInvalid choice\n");
		}
	}while(ch!=6);
	return 0;
}	


=====================================================================================================================
Q.2 Write an MPI program to calculate sum and average of randomly generated 1000 
numbers (stored in array) on a cluster


#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 1000

int main(int argc, char** argv) {
    int rank, size;
    int i, sum = 0, local_sum = 0;
    double avg = 0.0, local_avg = 0.0;
    int* arr;

  
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    
    arr = (int*) malloc(sizeof(int) * ARRAY_SIZE);
   
    srand(rank);

    
    for (i = 0; i < ARRAY_SIZE; i++) {
        arr[i] = rand() % 100;
    }

    for (i = 0; i < ARRAY_SIZE / size; i++) {
        local_sum += arr[rank * ARRAY_SIZE / size + i];
    }
    local_avg = (double) local_sum / (ARRAY_SIZE / size);

    MPI_Allreduce(&local_sum, &sum, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
    MPI_Allreduce(&local_avg, &avg, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
    avg /= size;

    if (rank == 0) {
        printf("Sum: %d\n", sum);
        printf("Average: %.2f\n", avg);
    }

    
    free(arr);
    MPI_Finalize();

    return 0;
}


remaining