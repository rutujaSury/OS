Q.1 Write a simulation program for disk scheduling using FCFS algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments.
 55, 58, 39, 18, 90, 160, 150, 38, 184
 Start Head Position: 50
---------------------------------------------------------------------------------------------------------
#include<stdio.h>
#include<math.h>>
int front,rear;
void init()
{
	front=rear=-1;
}
void display(int *Q)
{
	int i;
	for(i=front;i<=rear;i++)
		printf("\t%d",Q[i]);
}
void enqueu(int *Q,int n,int var)
{
	if(rear==n)
		printf("\nQueue is Full");
	else
	{
		if(front==-1)
			front++;
		rear++;
		Q[rear]=var;
	}
}
int FCFS(int *Q, int n)
{
    int j,seek=0,diff;
    for(j=0;j<n;j++)
    {
        diff=abs(Q[j+1]-Q[j]);
        seek+=diff;
    printf("Disk head moves from %d to %d with seek %d\n",Q[j],Q[j+1],diff);
    }
    return seek;
}
int main()
{
    int queue[20],n,var,head,i,j,k,seek,max;
    float avg;
    init();
    printf("\nFront=%d\nRear=%d",front,rear);
    printf("\nEnter the max range of disk\n");
    scanf("%d",&max);
    printf("Enter the size of queue request\n");
    scanf("%d",&n);
    printf("Enter the initial head position\n");
    scanf("%d",&head);
    printf("Enter the queue of disk positions to be read\n");
    enqueu(queue,n,head);
    for(i=1;i<=n;i++)
    {
        scanf("%d",&var);
        if(var<0||var>max)
            printf("\nError..!Given Position is invalid\n");
        else
        {
            enqueu(queue,n,var);
        }
    }
    printf("\nGiven Queue is\n");
    display(queue);
    printf("\n\nFCFS Algorithm\n");
    seek=FCFS(queue,n);
    printf("Total seek time is %d\n",seek);
    avg=seek/(float)n;
    printf("Average seek time is %f\n",avg);
    return 0;
}

=========================================================================================================
Q.2 Write an MPI program to calculate sum of all even randomly generated 1000 
numbers (stored in array) on a cluster
------------------------------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
#include<mpi.h>

int main(int args,char* argv[]){
	int arr[1000],localEven=0,globalEven=0;
	for(int i=0;i<1000;i++)
		arr[i]=rand()%100;
	for(int i=0;i<1000;i++)
		printf("%d ",arr[i]);
	printf("\n");
	
	MPI_Init(&args,&argv);
	int rank,size;
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	
	int chunk=1000/size;
	int newArr[chunk];
	
	MPI_Scatter(arr,chunk,MPI_INT,newArr,chunk,MPI_INT,0,MPI_COMM_WORLD);
	
	for(int i=0;i<chunk;i++){
		if(arr[i]%2==0)
			localEven+=arr[i];
		else
			continue;
	}
	
	MPI_Reduce(&localEven,&globalEven,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
	
	if(rank==0){
		
		printf("\nodd sum:%d\n",globalEven);
	}
	
	MPI_Finalize();
	return 0;
}