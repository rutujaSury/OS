Q.1 Write a simulation program for disk scheduling using SCAN algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. 
Display the list of request in the order in which it is served. Also display the total number 
of head moments.
33, 99, 142, 52, 197, 79, 46, 65
Start Head Position: 72
 Direction: User defined
----------------------------------------------------------------------------------------------------------

#include<stdio.h>
#include<stdlib.h>
int main()
{
    int RQ[100],i,j,n,TotalHeadMoment=0;
    int initial,size,move,temp, index;
    printf("Enter total disk size\n");
    scanf("%d",&size);
    printf("Enter the number of Requests\n");
    scanf("%d",&n);
    printf("Enter the Requests sequence\n");
    for(i=0;i<n;i++)
    	scanf("%d",&RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d",&initial);
   printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d",&move);
    
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(RQ[j]>RQ[j+1])
            {
                temp=RQ[j];
                RQ[j]=RQ[j+1];
                RQ[j+1]=temp;
            }
        }
    }
    for(i=0;i<n;i++)
    {
        if(initial<RQ[i])
        {
            index=i;
            break;
        }
    }
    
    if(move==1)
    {
        for(i=index;i<n;i++)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];
        }
       
        TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
        initial = size-1;
        for(i=index-1;i>=0;i--)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];   
        }
    }
    
    else
    {
        for(i=index-1;i>=0;i--)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];
        }
        
        TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
        initial =0;
        for(i=index;i<n;i++)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];
        }
    }
    printf("Total head movement is %d",TotalHeadMoment);
    return 0;
}

===========================================================================================================================================================
Q.2 Write an MPI program to find the max number from randomly generated 1000 numbers 
(stored in array) on a cluster (Hint: Use MPI_Reduce)
--------------------------------------------------------------------------------------------------------

#include<stdio.h>
#include<mpi.h>
#include<stdlib.h>
int main(int args,char** argv){
	int array[1000] ,global_max=0,local=0,rank,size,chunk;
	for(int i=0;i<1000;i++){
		array[i]=rand()%1000;
	}
	int local_max=0;
	MPI_Init(&args,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	
	chunk=1000/size;
	int newArr[chunk];
	MPI_Scatter(array,chunk,MPI_INT,newArr,chunk,MPI_INT,0,MPI_COMM_WORLD);
	global_max=newArr[0];
	
	for(int i=0;i<chunk;i++){
		if(newArr[i]>local_max){
			local_max=newArr[i];
		}
		
	}
	
	MPI_Reduce(&local_max,&global_max,1,MPI_INT,MPI_MAX,0,MPI_COMM_WORLD);
	if(rank==0){
		printf("the max:%d\n",global_max);
	}
	MPI_Finalize();
	return 0;
}