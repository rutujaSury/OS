Q.1 Write a C program to simulate Bankerâ€™s algorithm for the purpose of deadlock
avoidance.The following snapshot of system, A, B, C and D are the resource type
a) Calculate and display the content of need matrix?
b) Is the system in safe state? If display the safe sequence.
-------------------------------------------------------------------------------------

#include<stdio.h>
#include<stdlib.h>
int np,nr,i,j,ch;
int max[10][10],allocation[10][10],need[10][10],available[10];
void acceptmatrix(int arr[10][10])
{
	
	printf("enter the elements: ");
	int i,j;
	for(i=0;i<np;i++)
	{
		for(j=0;j<nr;j++)
		{
			scanf("%d",&arr[i][j]);
		}
	}
}
void acceptvector(int arr[])
{
	int i;
	for(i=0;i<nr;i++)
	{
		scanf("%d",&arr[i]);
	}
		
}
void findneed()
{
	int i,j;
	for(i=0;i<np;i++)
	{
		for(j=-0;j<nr;j++)
		{
			need[i][j]=max[i][j]-allocation[i][j];
		}
	}
	printf("\nNeed Calculated!");
}
void displaymatrix()
{
	int i,j;
	printf("\nAllocation\t\tMax\t\tNeed\n");
	for(i=0;i<np;i++)
	{
		for(j=0;j<nr;j++)
		{
			printf("%d",allocation[i][j]);
			//printf("\t");
		}
		for(j=0;j<nr;j++)
		{
			printf("%d",max[i][j]);
			//printf("\t");
		}
		for(j=0;j<nr;j++)
		{
			printf("%d",need[i][j]);
			//printf("\t");
		}
		printf("\n");
		
	}
	printf("Available\n");
	for(j=0;j<nr;j++)
		{
			printf("%d",available[j]);
			printf("\t");
		}
	
}

int main()
{
	
	printf("\nEnter the number of process");
	scanf("%d",&np);
	printf("\nEnter the number of resources:");
	scanf("%d",&nr);
	do{
		printf("\n1.Accept Allocation\n2.Accept Max\n3.calculate need\n4.Accept Available\n5.DISPLAY MATRIX\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				printf("Give Allocation:\n");
				acceptmatrix(allocation);
				break;
			case 2:
				acceptmatrix(max);
				break;
				
			case 3:
				findneed();
				break;
			case 4:
				acceptvector(available);
				break;
			case 5:
				displaymatrix(allocation);
				break;
			case 6:
				printf("\nInvalid choice\n");
		}
	}while(ch!=6);
	return 0;
}

===================================================================================================================================
Q.2 Write a simulation program for disk scheduling using SCAN algorithm. Accept total 
number of disk blocks, disk request string, and current head position from the user. Display 
the list of request in the order in which it is served. Also display the total number of head 
moments.
176, 79, 34, 60, 92, 11, 41, 114
Starting Head Position: 65
Direction: Left



#include<stdio.h>
#include<stdlib.h>
int main()
{
    int RQ[100],i,j,n,TotalHeadMoment=0;
    int initial,size,move,temp, index;
    printf("Enter total disk size\n");
    scanf("%d",&size);
    printf("Enter the number of Requests\n");
    scanf("%d",&n);
    printf("Enter the Requests sequence\n");
    for(i=0;i<n;i++)
    	scanf("%d",&RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d",&initial);
   printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d",&move);
    
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(RQ[j]>RQ[j+1])
            {
                temp=RQ[j];
                RQ[j]=RQ[j+1];
                RQ[j+1]=temp;
            }
        }
    }
    for(i=0;i<n;i++)
    {
        if(initial<RQ[i])
        {
            index=i;
            break;
        }
    }
    
    if(move==1)
    {
        for(i=index;i<n;i++)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];
        }
       
        TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
        initial = size-1;
        for(i=index-1;i>=0;i--)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];   
        }
    }
    
    else
    {
        for(i=index-1;i>=0;i--)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];
        }
        
        TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
        initial =0;
        for(i=index;i<n;i++)
        {
          TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
          initial=RQ[i];
        }
    }
    printf("Total head movement is %d",TotalHeadMoment);
    return 0;
}